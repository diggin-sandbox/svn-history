<?php
require_once 'PHPUnit/Framework.php';

require_once 'Diggin/Scraper/Filter.php';


function digginScraperFilterTestFunc($var) {
    return $var.'after';
}
require_once 'Zend/Filter/Interface.php';
require_once 'Zend/Loader.php';

class Gethna_Filter_Byte implements Zend_Filter_Interface {
    function filter($var) {
        return '世の中には10種類の人間がいる、2進法理解できる人と(以下略)';
    }
}


/**
 * Test class for Diggin_Scraper_Filter.
 * Generated by PHPUnit on 2009-01-16 at 22:04:47.
 */
class Diggin_Scraper_FilterTest extends PHPUnit_Framework_TestCase
{
   /**
    * @var    Diggin_Scraper_Filter
    * @access protected
    */
   protected $object;

   protected $className;


   /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    */
   protected function setUp()
   {
           $this->object = new Diggin_Scraper_Filter(new ArrayIterator(array()));
           $this->className = "Diggin_Scraper_Filter";

   }

   /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    */
   protected function tearDown()
   {
   }

   function testRun() {

       require_once 'Zend/Filter/PregReplace.php';
       $filter = new Zend_Filter_PregReplace('/[0-9]/', 'a');

       $obj = Diggin_Scraper_Filter::factory(new ArrayIterator(array('x1')), $filter);

       // instanceof Zend_Fileter_Interface

       
       $obj->rewind();
       $this->assertEquals('xa', $obj->current());

       
       //user_func 
       $obj = Diggin_Scraper_Filter::factory(new ArrayIterator(array('x', 'y')), 'digginScraperFilterTestFunc');

       $exps = array('xafter', 'yafter');
       foreach ($obj as $k => $v) {
            $this->assertEquals($exps[$k], $obj->current());
       }


       //Zend_Filter
       $obj = Diggin_Scraper_Filter::factory(new ArrayIterator(array('x1', 'y2')), 'digits');

       $exps = array('1', '2');
       foreach ($obj as $k => $v) {
            $this->assertEquals($exps[$k], $obj->current());
       }

       //Userland Filter Class

       $obj = Diggin_Scraper_Filter::factory(new ArrayIterator(array('x1')), 'Gethna_Filter_Byte');

       $exps = array('世の中には10種類の人間がいる、2進法理解できる人と(以下略)');
       foreach ($obj as $k => $v) {
            $this->assertEquals($exps[$k], $obj->current());
       }
   
   }
   /**
    *
    */
   public function testRunLambda() {

$func1 = create_function('$var', <<<FUNC
   return \$var.'a';
FUNC
);
       $values = array('x', 'y', 'z');

       $c = $this->className;

       $obj = Diggin_Scraper_Filter::factory(new ArrayIterator($values), $func1);

        foreach ($obj as $k => $v) {
                $this->assertEquals($values[$k].'a', $v);
        }
   }

    public function testException() {
        $notFilterClass = "Diggin_Version";

        try {    
            $obj = Diggin_Scraper_Filter::factory(new ArrayIterator(array(1)), $notFilterClass);
        } catch(Diggin_Scraper_Filter_Exception $expected) {
          return;
        }

         $this->fail('not cause exception');
    }
}
?>
