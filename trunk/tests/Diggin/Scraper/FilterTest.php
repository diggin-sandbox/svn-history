<?php
require_once 'PHPUnit/Framework.php';

require_once 'Diggin/Scraper/Filter.php';


function digginScraperFilterTestFunc($var) {
    return $var.'after';
}
require_once 'Zend/Filter/Interface.php';
require_once 'Zend/Loader.php';

class Gethna_Filter_Byte implements Zend_Filter_Interface {
    function filter($var) {
        return '世の中には10種類の人間がいる、2進法理解できる人と(以下略)';
    }
}


/**
 * Test class for Diggin_Scraper_Filter.
 * Generated by PHPUnit on 2009-01-16 at 22:04:47.
 */
class Diggin_Scraper_FilterTest extends PHPUnit_Framework_TestCase
{
   /**
    * @var    Diggin_Scraper_Filter
    * @access protected
    */
   protected $object;


   public $filters;

   /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    */
   protected function setUp()
   {
$func1 = create_function('$var', <<<FUNC
   return \$var.'a';
FUNC
);
$func2 = create_function('$var', <<<FUNC
   return \$var.'b';
FUNC
);
           $this->object = new Diggin_Scraper_Filter;
           $this->filters = array($func1, $func2);

   }

   /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    */
   protected function tearDown()
   {
       foreach($this->filters as $func) {
           $func = null;
       }
   }

   function testRun() {
       //user_func 
       $this->assertEquals(
           array('xafter', 'yafter'),
        $this->object->run(array('x', 'y'), array('digginScraperFilterTestFunc'))
       );
       //Zend_Filter
       $this->assertEquals(
           array('1', '2'),
        $this->object->run(array('x1', 'y2'), array('digits'))
       );
       
       $this->assertEquals(
           array('世の中には10種類の人間がいる、2進法理解できる人と(以下略)'),
        $this->object->run(array('x1'), array('Gethna_Filter_Byte'))
       );
   
   }
   
   /**
    */
   public function testRun_Lambda() {

       //global $func1;
       //var_dump($func1);
       //global $func2;

       $values = array('x', 'y', 'z');

       $filtered = $this->object->run($values, $this->filters);

       //var_dump($filtered);

       $this->assertEquals(array('xab', 'yab', 'zab'), $filtered);

   }
   
    public function testException() {
        //xdebug_disable();
        
        require_once 'Zend/Exception.php';
        $sonzaishinaiClassmei = "sonzaishinaiClassmeisonzaishinaiClassmei";
        $this->setExpectedException('Diggin_Scraper_Filter_Exception');
        @$this->object->run(array('val'), array($sonzaishinaiClassmei));
        
//        throw new
        //$this->throwException(new Zend_Exception());
        //@Zend_Loader::loadClass("Zend_Filter_$sonzaishinaiClassmei");
//        $sonzaishinaiClassmei = "sonzaishinaiClassmeisonzaishinaiClassmei";
//        try {
//            $this->setExpectedException('Exception');
//            @Zend_Loader::loadClass("Zend_Filter_$sonzaishinaiClassmei");
//            
//            //上のクラスが存在したらテストできない。
//            //$this->fail("arienai $sonzaishinaiClassmei");
//            //throw new RuntimeException('arienai');
//        } catch (Zend_Exception $e) {
//            try {
//                
//                @$this->object->run(array('val'), array($sonzaishinaiClassmei));
//            } catch (Exception $e) {
//            
//                $this->assertTrue($e instanceof Diggin_Scraper_Filter_Exception);
//                //var_dump($e->getMessage());
//                //die($e->getLine());
////                return;
//            }
//            
//            //$this->fail($e->getMessage());
//        }
    }
}
?>
